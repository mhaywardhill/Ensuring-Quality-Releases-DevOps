trigger:
- main

variables:
- group: terraform-group

- group: pl-group

- name: vmImageName
  value: 'ubuntu-latest' 

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Terraform
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      name: tfvars
      displayName: 'Download tfvars file'
      inputs:
        secureFile: 'terraform.tfvars' 
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'default'
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      displayName: 'Move tfvars file'
      inputs:
        targetType: 'inline'
        script: |
          mv /home/vsts/work/_temp/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.4'
    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(service_name)'
        backendAzureRmResourceGroupName: '$(resource_group_name)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(key)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: TerraformTaskV1@0
      displayName: Terraform Apply  
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
         -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(service_name)'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(service_name)'
              appName: '$(appName)'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
- stage: Tests
  jobs: 
    - job: Postman 
      displayName: Postman 
      steps:
      - task: Npm@1
        displayName: 'Install Newman'
        inputs:
          workingDir: '$(System.DefaultWorkingDirectory)'
          verbose: false
      - script: newman run ./automatedtesting/postman/StarterAPIs.json --reporters cli,junit --reporter-junit-export ./JUnitReport.xml --suppress-exit-code
        displayName: 'Run Newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: JUnitReport.xml
          searchFolder: '$(System.DefaultWorkingDirectory)'
